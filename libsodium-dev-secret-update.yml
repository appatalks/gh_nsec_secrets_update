name: Encrypt Secret and Update Repository Secret with libsodium-dev

on:
  workflow_dispatch:
    inputs:
      secret:
        description: 'The secret text to encrypt'
        required: true
      secret_name:
        description: 'The name of the repository secret to update'
        required: true
      pat_token:
        description: 'A personal access token with repo permissions'
        required: true

jobs:
  encrypt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Repository Public Key
        id: get-key
        run: |
          echo "Fetching repository public key..."
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ github.event.inputs.pat_token }}" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)
          # Extract the key and key_id using jq
          KEY=$(echo "$RESPONSE" | jq -r .key)
          KEY_ID=$(echo "$RESPONSE" | jq -r .key_id)
          echo "Repository public key: $KEY"
          echo "Repository key id: $KEY_ID"
          echo "key=$KEY" >> $GITHUB_OUTPUT
          echo "key_id=$KEY_ID" >> $GITHUB_OUTPUT
        env:
          PAT_TOKEN: ${{ github.event.inputs.pat_token }}

      - name: Install required dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq libsodium-dev

      - name: Create project files
        run: |
          mkdir EncryptSecret
          cd EncryptSecret
          # Create Program.cs
          cat << 'EOF' > Program.cs
          using System;
          using System.Text;
          using System.Runtime.InteropServices;
          
          namespace EncryptSecret
          {
              class Program
              {
                  // crypto_box_SEALBYTES is defined by libsodium (48 bytes)
                  const int crypto_box_SEALBYTES = 48;
          
                  [DllImport("libsodium", CallingConvention = CallingConvention.Cdecl)]
                  public static extern int sodium_init();
          
                  [DllImport("libsodium", CallingConvention = CallingConvention.Cdecl)]
                  public static extern int crypto_box_seal(byte[] ciphertext, byte[] message, ulong message_len, byte[] publicKey);
          
                  static void Main(string[] args)
                  {
                      if (args.Length < 2)
                      {
                          Console.Error.WriteLine("Usage: dotnet run <secret> <public_key_base64>");
                          Environment.Exit(1);
                      }
          
                      string secret = args[0];
                      string publicKeyBase64 = args[1];
          
                      // Convert the secret text to bytes and decode the Base64 public key.
                      byte[] secretBytes = Encoding.UTF8.GetBytes(secret);
                      byte[] publicKeyBytes = Convert.FromBase64String(publicKeyBase64);
          
                      // Initialize libsodium.
                      if (sodium_init() < 0)
                      {
                          Console.Error.WriteLine("sodium_init failed");
                          Environment.Exit(1);
                      }
          
                      // Allocate space for the ciphertext.
                      int cipherLength = secretBytes.Length + crypto_box_SEALBYTES;
                      byte[] cipherText = new byte[cipherLength];
          
                      int ret = crypto_box_seal(cipherText, secretBytes, (ulong)secretBytes.Length, publicKeyBytes);
                      if(ret != 0)
                      {
                          Console.Error.WriteLine("Encryption failed");
                          Environment.Exit(1);
                      }
          
                      // Output the encrypted bytes as a Base64 string.
                      string encryptedBase64 = Convert.ToBase64String(cipherText);
                      Console.WriteLine(encryptedBase64);
                  }
              }
          }
          EOF
          
          # Create EncryptSecret.csproj
          cat << 'EOF' > EncryptSecret.csproj
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <OutputType>Exe</OutputType>
              <TargetFramework>net7.0</TargetFramework>
              <ImplicitUsings>enable</ImplicitUsings>
              <Nullable>enable</Nullable>
            </PropertyGroup>
          </Project>
          EOF

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'
      
      - name: Build and Run Encryption
        id: encrypt_run
        working-directory: EncryptSecret
        run: |
          dotnet restore
          dotnet build --configuration Release
          # Run the encryption using the provided secret and the repository public key fetched earlier.
          ENCRYPTED=$(dotnet run --configuration Release -- "${{ github.event.inputs.secret }}" "${{ steps.get-key.outputs.key }}")
          echo "Encrypted secret: $ENCRYPTED"
          # Set the encrypted secret as an output for later steps.
          echo "encrypted_secret=$ENCRYPTED" >> $GITHUB_OUTPUT
      
      - name: Update Repository Secret
        run: |
          SECRET_NAME=${{ github.event.inputs.secret_name }}
          echo "Updating repository secret $SECRET_NAME..."
          curl -X PUT -H "Authorization: Bearer ${{ github.event.inputs.pat_token }}" \
               -H "Accept: application/vnd.github+json" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/repos/${{ github.repository }}/actions/secrets/$SECRET_NAME \
               -d "{\"encrypted_value\": \"${{ steps.encrypt_run.outputs.encrypted_secret }}\", \"key_id\": \"${{ steps.get-key.outputs.key_id }}\"}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
