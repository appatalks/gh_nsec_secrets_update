name: .NET NSec C Encrypt and Update Secrets

on:
  workflow_dispatch:
    inputs:
      message:
        description: 'New or updated Secret'
        required: true
        default: 'Use the Force, Luke!'
      pat_token:
        description: 'Personal Access Token with repo permissions'
        required: true
      secret_name:
        description: 'The name of the repository secret to update'
        required: true

jobs:
  hash-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create project files
        run: |
          mkdir Blake2bHashExample
          cd Blake2bHashExample
          cat << 'EOF' > Program.cs
          using System;
          using System.Text;
          using NSec.Cryptography;

          namespace Blake2bHashExample
          {
              class Program
              {
                  static void Main(string[] args)
                  {
                      // Use the input message, or the default message if none is provided.
                      string message = args.Length > 0 ? args[0] : "Use the Force, Luke!";

                      // Convert the message to bytes.
                      byte[] data = Encoding.UTF8.GetBytes(message);

                      // Create an instance of the BLAKE2b algorithm.
                      var blake2b = new Blake2b();

                      // Compute the hash of the data.
                      byte[] digest = blake2b.Hash(data);

                      // Output the hash encoded in Base64.
                      string output = Convert.ToBase64String(digest);
                      Console.WriteLine(output);
                  }
              }
          }
          EOF

          cat << 'EOF' > Blake2bHashExample.csproj
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <OutputType>Exe</OutputType>
              <TargetFramework>net7.0</TargetFramework>
              <ImplicitUsings>enable</ImplicitUsings>
              <Nullable>enable</Nullable>
            </PropertyGroup>
            <ItemGroup>
              <PackageReference Include="NSec.Cryptography" Version="18.6.0" />
            </ItemGroup>
          </Project>
          EOF

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Build and run hash example
        id: hash_run
        working-directory: Blake2bHashExample
        run: |
          dotnet restore
          dotnet build --configuration Release
          # Capture the output (the Base64 encoded BLAKE2b hash) from the run
          OUTPUT=$(dotnet run --configuration Release -- "${{ github.event.inputs.message }}")
          echo "encrypted_secret=${OUTPUT}" >> $GITHUB_OUTPUT
          echo "Hash output: $OUTPUT"

      - name: Get Repository Public Key
        id: get-key
        run: |
          echo "Fetching repository public key..."
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ github.event.inputs.pat_token }}" \
                             -H "Accept: application/vnd.github+json" \
                             -H "X-GitHub-Api-Version: 2022-11-28" \
                             https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)
          KEY=$(echo "$RESPONSE" | jq -r .key)
          KEY_ID=$(echo "$RESPONSE" | jq -r .key_id)
          echo "Repository public key: $KEY"
          echo "Repository key id: $KEY_ID"
          echo "key=$KEY" >> $GITHUB_OUTPUT
          echo "key_id=$KEY_ID" >> $GITHUB_OUTPUT
        env:
          PAT_TOKEN: ${{ github.event.inputs.pat_token }}

      - name: Update Repository Secret
        run: |
          SECRET_NAME=${{ github.event.inputs.secret_name }}
          echo "Updating repository secret $SECRET_NAME..."
          curl -X PUT -H "Authorization: Bearer ${{ github.event.inputs.pat_token }}" \
               -H "Accept: application/vnd.github+json" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/repos/${{ github.repository }}/actions/secrets/$SECRET_NAME \
               -d "{\"encrypted_value\": \"${{ steps.hash_run.outputs.encrypted_secret }}\", \"key_id\": \"${{ steps.get-key.outputs.key_id }}\"}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
